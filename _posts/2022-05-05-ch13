---
layout: single
title: "Warming-up C programming ch13"
categories: coding

---





# 개념정리







## 1. 동적 메모리

1. #### 동적 메모리의 개념

   <img src="../images/2022-05-05-ch13/프메레.png" alt="프메레" style="zoom:50%;" />

   - 텍스트(코드) 세그먼트 : 읽기 전용 영역, 함수 코드나 문자열 리터럴

   - data 세그먼트 : 정적 메모리, 초기화된 전역변수, static 변수

   - bss 세그먼트 : 정적 메모리, 초기화되지 않은 전역변수, static 변수

   - heap 영역 : 동적메모리, 

   - stack 영역 : 정적메모리, 지역변수

   - 정적 메모리 : 메모리의 할당과 해제가 컴파일 시간에 결정

   - 동적 메모리 : 메모리의 할당과 해제가 실행 시간에 결정

   - |    특징     | 정적 메모리                                                  | 동적 메모리                                  |
     | :---------: | ------------------------------------------------------------ | -------------------------------------------- |
     | 메모리 할당 | 컴파일 시간에 이루어진다.                                    | 실행 시간에 이루어진다.                      |
     | 메모리 해제 | 자동으로 해제                                                | 명시적으로 해제                              |
     |  사용 범위  | 지역 변수는 선언된 블록 내, 전역 변수는 프로그램 전체에서 사용할 수 있다. | 프로그래머가 원하는 동안만큼 사용할 수 있다. |
     | 메모리 관리 | 컴파일러의 책임                                              | 프로그래머의 책임                            |

     

2. #### 동적 메모리의 필요성

   - 동적 메모리는 꼭 필요한 만큼 크기를 지정해서 메모리를 할당할 수 있다.
     - 버퍼 오버런, 메모리 낭비 문제 해결 가능

3. #### 동적 메모리의 할당과 해제

   1. ##### 동적 메모리의 할당

      - <stdlib.h> 헤더파일 포함
      - `void* malloc(size_t size);` size바이트 만큼 동적 메모리를 할당하고 할당된 메모리의 주소를 리턴
      - 동적 메모리는 반드시 포인터로 접근
      - 동적 메모리를 가리키는 포인터를 배열처럼 사용할 수 있다.

   2. ##### 동적 메모리의 해제

      - 사용이 끝나면 반드시 명시적으로 해제해야 한다.

      - `void free(void* memblock);` : memblock이 가리키는 동적 메모리를 해제한다.

      - 동적 메모리 해제 시 동적 메모리를 가리키던 포인터를 널 포인터로 만드는 것이 안전 (메모리 누수)

   3. ##### 동적 메모리의 사용 순서

      1. 동적 메모리의 주소를 저장할 포인터를 준비 
         - 포인터의 데이터형 정하고 널 포인터로 초기화
         - `int* arr = NULL;`
      2. malloc함수의 인자로 할당할 메모리의 바이트 크기를 지정하고 리턴값은 형 변환
         - `arr = (int*)malloc(sizeof(int) *size);`
      3. 동적 메모리 사용 시 배열의 원소를 가리키는 포인터처럼 사용
         - `for(int i = 0; i <size; i++) scanf("%d", &arr[i])`
      4. 동적 메모리 사용이 끝나면 free함수로 해제하고 널포인터로 만들기
         - `free(arr); arr = NULL;`

4. #### 동적 메모리의 사용 시 주의 사항

   1. ##### 동적 메모리 해제 후 해제된 메모리를 사용해서는 안된다.

   2. ##### 해제된 동적 메모리를 다시 해제해서는 안된다.

   3. ##### free 함수는 동적 메모리를 해제할 때만 사용해야 한다.

   4. ##### 동적 메모리의 주소를 잃어버리지 않도록 주의해야 한다.

      - 함수를 호출한 쪽에서 사용이 끝난 동적 메모리를 해제함

5. #### 동적 메모리의 활용

   1. ##### 동적 메모리에 문자열 할당하기

      - 문자열을 처리할 때 동적 메모리를 사용하면 꼭 필요한 만큼 메모리를 할당하고 사용할 수 있다

   2. ##### 동적 메모리에 구조체 할당하기

      - 포인터 배열만 준비해두고 구조체는 필요할 때마다 하나씩 동적 메모리에 할당하는 것이 효율적

6. #### 동적 메모리 관리 함수

   - | 함수 원형                                  | 기능                                                         |
     | :----------------------------------------- | :----------------------------------------------------------- |
     | void* malloc(size_t size);                 | 동적 메모리를 size바이트 만큼 할당한다.                      |
     | void free(void* ptr);                      | ptr이 가리키는 동적 메모리를 헤제한다.                       |
     | void* calloc(size_t num, size_t size);     | 동적 메모리 배열을 num*size 바이트 만큼 할당하고 0으로 초기화 한다. |
     | void *realloc(void *ptr, size_t new_size); | ptr이 가리키는 동적 메모리의 크기를 new_size로 변경해서 재할당한다. |

     






## 2. 함수 포인터

1. #### 함수 포인터의 기본

   1. ##### 함수 포인터의 선언

      - 함수 포인터는 함수의 주소를 저장하는 포인터
      - `int (*pf)(int)`
        - 함수의 리턴형은 그대로 써준다.

        - *와 포인터 변수명은 ()로 묶어준다. (묶지 않으면 포인터형을 리턴하는 함수 선언문)

        - 매개변수 목록도 그대로 써준다, 매개변수 이름은 생략할 수 있다.
      - 함수 포인터도 초기화 하지 않으면 쓰레기 값을 가진다.
      - 함수 이름은 함수의 시작 주소를 의미하므로 & 없이 함수 이름만 사용할 수도 있다.
        - `int(*pf)(int) = &get_factorial;`
        - `pf = get_factorial`

   2. ##### 함수 포인터의 사용

      - 함수 포인터가 가리키는 함수를 호출하려면 역참조 연산자를 이용한다. (역참조 연산자와 함수 포인터를 ()로 묶기)
      - 역참조 연산자 없이 함수 포인터로 직접 함수 호출도 가능
      - 함수 포인터의 원형과 함수 포인터가 가리키는 함수의 원형이 같다면 값을 변경할 수 있다.

2. #### 함수 포인터형

   1. ##### 함수 포인터형의 정의

      - 정의하는 방법은 맨 앞에 typedef를 써주는 것 빼고 동일

      - 단, typedef로 정의된 것은 함수 포인터 변수가 아니라 데이터형 이름이다.

   2. ##### 함수 포인터형의 사용

      - 함수 포인터형의 변수는 함수 포인터가 된다.

3. #### 함수 포인터 배열

   - 함수 포인터 배열은 배열의 원소가 함수 포인터인 배열이다.

   - ```c
     typedef void(*pfunc_t)(const char*); //함수 포인터형 정의
     pfunc_t arr[3] = { NULL }; // 원소가 함수 포인터이고 크기가 3인 함수 포인터 배열
     ```

   - 원형이 같음 함수들을 모아서 관리하기 용이함

4. #### 함수 포인터의 활용

   - 함수 포인터를 이용하면 이름을 알 수 없는 함수를 호출하는 코드를 작성할 수 있다.
   - 콜백 함수 : 프로그래머가 정의한 함수의 주소를 라이브러리 함수를 호출할 때 전달해서 특정 조건일 때 호출되도록 등록하는 기능







# 프로그래밍 과제

1. 동적 메모리
   - 프로그램 시작 시 전체 좌석수를 입력받는다. : scanf로 좌석 수 입력받고 현재 좌석 출력, 좌석수를 얼만큼 입력 받을지 모르니 동적메모리로 배열 생성하기
   - 예매할 좌석수를 입력받아 빈 자리 할당하기
     - while 무한반복문으로 입력받고 전체 좌석을 다 예매하면 프로그램 종료하기
     - 좌석을 예매한 만큼 sum변수를 증가시키기
2. 동적 메모리
   - x배열의 2배 크기를 늘려야 하니 size를 2로 설정해 놓고 sizeof(arr1)/4 이런식으로 x배열의 원소의 개수를 알아낸다.
   - for문으로 x배열을 출력하면서 동시에 y배열에다가 x배열의 값에 해당하는 것을 2개씩 넣는다.
3. 동적메모리, 배열, 출력 매개변수
   - 정수형 배열 2개를 매개변수로 전달받고 그 배열을 리턴하는 함수 만들기
     - 배열의 원소도 같이 매개변수로 전달해준다.
     - int형 배열 2개의 사이즈를 각각 구한 다음 그것의 합을 동적 메모리의 크기로 할당한다.
     - for문으로 첫번째 배열의 원소를 동적 메모리 배열에 할당한 다음 두번째 배열의 원소들을 할당한다.
     - 그런다음 동적 메모리 할당 배열을 리턴한다.
   - for문으로 3가지 배열 모두를 출력한다.
   - 동적메모리를 호출한 쪽에서 해제해야한다.
4. 동적 메모리
   - 배열의 행크기와 열크기를 scanf로 입력받고  그에 따라 동적할당한다. 
     - 2차원 배열을 동적할당하기 위해서는 malloc()를 여러번 호출한다.
   - 임의의 정수를 생성하는 것은 rand함수를 사용한다.
     - rand함수를 사용하기 위해서는 stdlib.h 헤더파일을 include해야한다. rand함수는 0부터 RAND_MAX까지 범위까지 난수를 생성한다.
     - rand함수를 사용하면 seed값을 계속 바꿔줘야지 진정한 랜덤한 수 이기 때문에 `srand(time(NULL));` 코드문을 추가해준다. (time.h 헤더파일)
       - time(NULL) : 호출 시 1970/1/1 0시부터 현재(프로그램 실행 시)까지 흐른 시간을 리턴해줌
5. d
6. d
7. d
8. d
9. dd
